@page "/guestorders/create"
@inject yoko.Data.ApplicationDbContext DB
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>GuestOrder</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @* <form method="post" @onsubmit="AddGuestOrder"> *@
        <div class="mb-3">
            <label for="services" class="form-label" style="font-size: 24px;">Select Services:</label>
            @foreach (var service in services)
            {
                <div class="form-check">
                    <input id="@service.Id" type="checkbox" checked="@IsServiceSelected[service.Id]" @onchange="e => ToggleServiceSelection(service.Id)" class="form-check-input" />
                    <label class="form-check-label" for="@service.Id">@service.Name-$@service.Cost</label>
                </div>
            }
        </div>
        <p>Selected Services Count: @SelectedServicesCount</p>
        <p>Total Order Cost: $@TotalOrderCost</p>
        <button class="btn btn-primary" @onclick="AddGuestOrder">Create</button>
        @* </form> *@
    </div>
    <div class="col-md-6">
        <h4>Previous services:</h4>
        <ul>
            @foreach (var service in previousServices)
            {
                <li>@service.Name - ordered @service.Count time(s)</li>
            }
        </ul>
    </div>
</div>
<div>
    <a href="/guestorders">Back to List</a>
</div>

@code {

    private List<YoService> services = new List<YoService>();
    private List<(int Id, string Name, int Count)> previousServices = new List<(int Id, string Name, int Count)>();
    private Dictionary<int, bool> IsServiceSelected { get; set; } = new Dictionary<int, bool>();

    private int SelectedServicesCount { get; set; }

    private double TotalOrderCost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Получаем список услуг
        services = DB.YoServices.ToList();

        // Инициализируем словарь для отслеживания выбранных услуг
        foreach (var service in services)
        {
            IsServiceSelected[service.Id] = false;
        }

        // Получаем предыдущие услуги
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userId = currentUser.FindFirstValue(ClaimTypes.NameIdentifier);
            previousServices = await GetPreviousServices(userId);
        }
        // Отмечаем предыдущие услуги как выбранные
        foreach (var service in previousServices)
        {
            IsServiceSelected[service.Id] = true;
        }

        UpdateSelectedServicesCount();
        UpdateTotalOrderCost();
    }

    private async Task<List<(int Id, string Name, int Count)>> GetPreviousServices(string userId)
    {
        var services = new List<(int Id, string Name, int Count)>();

        var user = await DB.Users.FirstOrDefaultAsync(u => u.Id == userId);
        if (user != null)
        {
            var guest = await DB.YoGuests.FirstOrDefaultAsync(g => g.UserId == userId);
            if (guest != null)
            {
                // Находим все резервации гостя
                var reservations = await DB.YoReservations
                    .Where(r => r.GuestId == guest.Id)
                    .ToListAsync();

                // Для каждой резервации найдем связанный заказ и услуги
                foreach (var reservation in reservations)
                {
                    var order = await DB.YoOrders.FirstOrDefaultAsync(o => o.ReservationId == reservation.Id);
                    if (order != null)
                    {
                        var serviceInOrders = await DB.YoServiceinOrders
                            .Include(sio => sio.YoService)
                            .Where(sio => sio.OrderId == order.Id)
                            .ToListAsync();

                        // Группируем записи YoServiceinOrder по Id услуги и подсчитываем количество
                        var serviceCounts = serviceInOrders
                            .GroupBy(sio => sio.ServiceId)
                            .Select(group => new { ServiceId = group.Key, Count = group.Count() })
                            .ToList();

                        // Получаем Id, Name и количество заказов для каждой услуги
                        foreach (var count in serviceCounts)
                        {
                            var serviceName = await DB.YoServices.Where(s => s.Id == count.ServiceId).Select(s => s.Name).FirstOrDefaultAsync();
                            services.Add((count.ServiceId, serviceName, count.Count));
                        }
                    }
                }
            }
        }

        return services;
    }


    private void ToggleServiceSelection(int serviceId)
    {
        IsServiceSelected[serviceId] = !IsServiceSelected[serviceId];
        UpdateSelectedServicesCount();
        UpdateTotalOrderCost();
    }

    private void UpdateSelectedServicesCount()
    {
        SelectedServicesCount = IsServiceSelected.Count(kvp => kvp.Value);
    }

    private void UpdateTotalOrderCost()
    {
        TotalOrderCost = 0;
        foreach (var kvp in IsServiceSelected)
        {
            if (kvp.Value)
            {
                var selectedService = services.FirstOrDefault(s => s.Id == kvp.Key);
                if (selectedService != null)
                {
                    TotalOrderCost += selectedService.Cost;
                }
            }
        }
    }


    private async Task AddGuestOrder()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userManager = (UserManager<ApplicationUser>)UserManager;
            var user = await userManager.GetUserAsync(currentUser);
            var guest = DB.YoGuests.First(c => c.UserId == user.Id);
            if (guest == null)
            {
                NavigationManager.NavigateTo("/yoguests/create");
            }           
            var reservation = DB.YoReservations.OrderByDescending(o => o.Id).First(c => c.GuestId == guest.Id);
            if (reservation == null)
            {
                NavigationManager.NavigateTo("/yoreservation/create");
            }
            var yoOrder = new YoOrder
                {
                    ReservationId = reservation.Id,
                    Reservation = reservation,
                    OrderStatus = OrderStatus.Consideration,
                    OrderDate = DateTime.Now,
                    Cost = TotalOrderCost
                };

            try
            {
                DB.YoOrders.Add(yoOrder);
                await DB.SaveChangesAsync();

                foreach (var kvp in IsServiceSelected)
                {
                    if (kvp.Value)
                    {
                        var selectedService = services.FirstOrDefault(s => s.Id == kvp.Key);
                        if (selectedService != null)
                        {
                            var serviceInOrder = new YoServiceinOrder
                                {
                                    ServiceId = selectedService.Id,
                                    YoService = selectedService,
                                    Order = yoOrder,
                                    OrderId = yoOrder.Id,
                                    Amount = SelectedServicesCount
                                };
                            DB.YoServiceinOrders.Add(serviceInOrder);
                        }
                    }
                }
                await DB.SaveChangesAsync();

            }
            catch (Exception e)
            {
                var test = e;
            }
        }

        NavigationManager.NavigateTo("/guestorders");
    }

}
