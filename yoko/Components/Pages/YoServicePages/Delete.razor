@page "/yoservices/delete"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>YoService</h4>
    <hr />
    @if (yoservice is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@yoservice.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@yoservice.Cost</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Photo</dt>
            <dd class="col-sm-10">
                @if (yoservice.Photo != null)
                {
                    var imageBase64 = Convert.ToBase64String(yoservice.Photo);
                    var imageSrc = $"data:image/jpeg;base64,{imageBase64}";
                    <img src="@imageSrc" alt="Room Photo" style="max-width: 500px;" />
                }
            </dd>
        </dl>
        <EditForm method="post" Model="yoservice" OnValidSubmit="DeleteYoService" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(yoservice is null)">Delete</button> |
            <a href="/yoservices">Back to List</a>
        </EditForm>
    }
</div>

@code {
    YoService? yoservice;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        yoservice = await DB.YoServices.FirstOrDefaultAsync(m => m.Id == Id);

        if (yoservice is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteYoService()
    {
        DB.YoServices.Remove(yoservice!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/yoservices");
    }
}
