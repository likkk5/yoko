@page "/YoGuests/edit"
@inject yoko.Data.ApplicationDbContext DB
@using System.Text.RegularExpressions
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>YoGuest</h4>
<hr />
@if (YoGuest is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="YoGuest" OnValidSubmit="UpdateYoGuest" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="YoGuest.Id" value="@YoGuest.Id" />              
                <div class="mb-3">
                    <label for="residence" class="form-label">Residence:</label>
                    <InputSelect id="residence" @bind-Value="YoGuest.Residence" class="form-select" @onchange="ValidateResidence" required>
                        <option value="">Select a country...</option>
                        @foreach (var country in validCountries)
                        {
                            <option value="@country">@country</option>
                        }
                    </InputSelect>     
                    <ValidationMessage For="() => YoGuest.Residence" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="passportnumber" class="form-label">PassportNumber:</label>
                    <InputText id="passportnumber" @bind-Value="YoGuest.PassportNumber" class="form-control" @oninput=" ValidatePassportNumber" required />
                    @if (!string.IsNullOrEmpty(passportNumberErrorMessage))
                    {
                        <p class="text-danger">@passportNumberErrorMessage</p>
                    }
                    <ValidationMessage For="() => YoGuest.PassportNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputSelect id="userid" @bind-Value="YoGuest.UserId" class="form-select">
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.UserName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => YoGuest.UserId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/yoguests">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public YoGuest? YoGuest { get; set; }

    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        YoGuest ??= await DB.YoGuests.FirstOrDefaultAsync(m => m.Id == Id);

        if (YoGuest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        // Получаем список пользователей
        var allUsers = UserManager.Users.ToList();
        users.AddRange(allUsers);
        passportNumberErrorMessage = null;
    }
    // Словарь для хранения регулярных выражений для каждой страны
    Dictionary<string, string> countryRegexMap = new Dictionary<string, string>
{
    { "Belarus", @"^(AB|AC|AM|MP|MC)\d{7}$" },
    { "Russia", @"^\d{10}$" },
    { "USA", @"^\d{9}$" },
    { "Germany", @"\b[CF-HJ-NPRTV-Z0-9]{9}[0-9]?D?\b$" },
    { "France", @"\b[0-9]{2}[A-Z]{2}[0-9]{5}\b$" },
};

    private string passportNumberErrorMessage;

    private async Task ValidatePassportNumber(ChangeEventArgs e)
    {
        string passportNumber = e.Value?.ToString();
        string selectedCountry = YoGuest.Residence; // Получаем выбранную страну

        // Получаем регулярное выражение для выбранной страны
        if (countryRegexMap.TryGetValue(selectedCountry, out string countryRegex))
        {
            var regex = new Regex(countryRegex);

            if (!regex.IsMatch(passportNumber))
            {
                YoGuest.PassportNumber = null; // Очистить введенное значение
                passportNumberErrorMessage = "Invalid passport number for selected country.";
            }
            else
            {
                passportNumberErrorMessage = null;
            }
        }
        else
        {
            // Если для страны нет определенного регулярного выражения, считаем номер паспорта невалидным
            YoGuest.PassportNumber = null; // Очистить введенное значение
            passportNumberErrorMessage = "No validation rule found for selected country.";
        }

        // Обновить компонент
        await InvokeAsync(() => StateHasChanged());
    }
    private List<string> validCountries = new List<string> { "Belarus", "Russia", "USA", "Germany", "France", /* другие страны */ };

    private async Task ValidateResidence(ChangeEventArgs e)
    {
        string residence = e.Value?.ToString();

        if (!validCountries.Contains(residence))
        {
            YoGuest.Residence = null; // Очистить введенное значение
        }

        // Обновить компонент
        await InvokeAsync(() => StateHasChanged());
    }
    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateYoGuest()
    {
        if (!string.IsNullOrEmpty(passportNumberErrorMessage))
        {
            YoGuest.PassportNumber = null;
            return;
        }
        DB.Attach(YoGuest!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!YoGuestExists(YoGuest!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/yoguests");
    }

    bool YoGuestExists(int id)
    {
        return DB.YoGuests.Any(e => e.Id == id);
    }
}
