@page "/yoguests/create"
@inject yoko.Data.ApplicationDbContext DB
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>YoGuest</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="YoGuest" OnValidSubmit="AddYoGuest" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="residence" class="form-label">Residence:</label>
                <InputSelect id="residence" @bind-Value="YoGuest.Residence" class="form-select" @onchange="ValidateResidence" required>
                    <option value="">Select a country...</option>
                    @foreach (var country in validCountries)
                    {
                        <option value="@country">@country</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => YoGuest.Residence" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="passportnumber" class="form-label">PassportNumber:</label>
                <InputText id="passportnumber" @bind-Value="YoGuest.PassportNumber" class="form-control" @oninput="ValidatePassportNumber" required />
                @if (!string.IsNullOrEmpty(passportNumberErrorMessage))
                {
                    <p class="text-danger">@passportNumberErrorMessage</p>
                }
                <ValidationMessage For="() => YoGuest.PassportNumber" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label>
                <InputSelect id="userid" @bind-Value="YoGuest.UserId" class="form-select" disabled="@IsUser">
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => YoGuest.UserId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/yoguests">Back to List</a>
</div>

<script>
    function showNotification(message) {
        alert(message);
    }
</script>
@code {
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private bool IsUser { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var allUsers = UserManager.Users.ToList();
        users.AddRange(allUsers);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userManager = (UserManager<ApplicationUser>)UserManager;
            var user = await userManager.GetUserAsync(currentUser);

            if (user != null)
            {
                IsUser = await userManager.IsInRoleAsync(user, "user");
                YoGuest.UserId = user.Id;
            }
        }
    }

    [SupplyParameterFromForm]
    public YoGuest YoGuest { get; set; } = new();

    Dictionary<string, string> countryRegexMap = new Dictionary<string, string>
    {
        { "Belarus", @"^(AB|AC|AM|MP|MC)\d{7}$" },
        { "Russia", @"^\d{10}$" },
        { "USA", @"^\d{9}$" },
        { "Germany", @"\b[CF-HJ-NPRTV-Z0-9]{9}[0-9]?D?\b$" },
        { "France", @"\b[0-9]{2}[A-Z]{2}[0-9]{5}\b$" },
    };

    private string passportNumberErrorMessage;

    private List<string> validCountries = new List<string> { "Belarus", "Russia", "USA", "Germany", "France" };

    private async Task ValidatePassportNumber(ChangeEventArgs e)
    {
        string passportNumber = e.Value?.ToString();
        string selectedCountry = YoGuest.Residence;

        if (countryRegexMap.TryGetValue(selectedCountry, out string countryRegex))
        {
            var regex = new Regex(countryRegex);

            if (!regex.IsMatch(passportNumber))
            {
                YoGuest.PassportNumber = null;
                passportNumberErrorMessage = "Invalid passport number for selected country.";
            }
            else if (!await IsPassportNumberUnique(passportNumber))
            {
                YoGuest.PassportNumber = null;
                passportNumberErrorMessage = "Passport number already exists.";
            }
            else
            {
                passportNumberErrorMessage = null;
            }
        }
        else
        {
            YoGuest.PassportNumber = null;
            passportNumberErrorMessage = "No validation rule found for selected country.";
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ValidateResidence(ChangeEventArgs e)
    {
        string residence = e.Value?.ToString();

        if (!validCountries.Contains(residence))
        {
            YoGuest.Residence = null;
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task<bool> IsPassportNumberUnique(string passportNumber)
    {
        return !await DB.YoGuests.AnyAsync(g => g.PassportNumber == passportNumber);
    }

    public async Task AddYoGuest()
    {
        if (!string.IsNullOrEmpty(passportNumberErrorMessage))
        {
            YoGuest.PassportNumber = null;
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userManager = (UserManager<ApplicationUser>)UserManager;
            var user = await userManager.GetUserAsync(currentUser);
            YoGuest.UserId = user.Id;

            DB.YoGuests.Add(YoGuest);
            await DB.SaveChangesAsync();

            await JSRuntime.InvokeVoidAsync("showNotification", "Guest created successfully!");
            NavigationManager.NavigateTo("/yoguests");
        }
    }
}
