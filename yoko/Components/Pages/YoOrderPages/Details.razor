@page "/yoorders/details"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>YoOrder</h4>
    <hr />
    @if (yoorder is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrderDate</dt>
            <dd class="col-sm-10">@yoorder.OrderDate</dd>
            <dt class="col-sm-2">ReservationId</dt>
            <dd class="col-sm-10">@yoorder.ReservationId</dd>
            <dt class="col-sm-2">OrderStatus</dt>
            <dd class="col-sm-10">@yoorder.OrderStatus</dd>
            <dt class="col-sm-2">NotificationId</dt>
            <dd class="col-sm-10">@yoorder.NotificationId</dd>
            <dt class="col-sm-2">EmployeeId</dt>
            <dd class="col-sm-10">@yoorder.EmployeeId</dd>
            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@yoorder.Cost</dd>
        </dl>
        <div>
            <a href="@($"/yoorders/edit?id={yoorder.Id}")">Edit</a> |
            <a href="@($"/yoorders")">Back to List</a>
        </div>
    }
</div>

@code {
    YoOrder? yoorder;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        yoorder = await DB.YoOrders.FirstOrDefaultAsync(m => m.Id == Id);

        if (yoorder is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
