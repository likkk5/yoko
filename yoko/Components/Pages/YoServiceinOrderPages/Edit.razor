@page "/YoServiceinOrders/edit"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>YoServiceinOrder</h4>
<hr />
@if (YoServiceinOrder is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="YoServiceinOrder" OnValidSubmit="UpdateYoServiceinOrder" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="YoServiceinOrder.Id" value="@YoServiceinOrder.Id" />
                <div class="mb-3">
                    <label for="serviceid" class="form-label">ServiceId:</label>
                    <select id="serviceid" @bind="YoServiceinOrder.ServiceId" class="form-control">
                        @foreach (var service in services)
                        {
                            <option value="@service.Id">@service.Id</option>
                        }
                    </select>
                    <ValidationMessage For="() => YoServiceinOrder.ServiceId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="orderid" class="form-label">OrderId:</label>
                    <select id="orderid" @bind="YoServiceinOrder.OrderId" class="form-control">
                        @foreach (var order in orders)
                        {
                            <option value="@order.Id">@order.Id</option>
                        }
                    </select>
                    <ValidationMessage For="() => YoServiceinOrder.OrderId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="employeeid" class="form-label">EmployeeId:</label>
                    <select id="employeeid" @bind="YoServiceinOrder.EmployeeId" class="form-control">
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.UserName</option>
                        }
                    </select>
                    <ValidationMessage For="() => YoServiceinOrder.EmployeeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="YoServiceinOrder.Amount" class="form-control" />
                    <ValidationMessage For="() => YoServiceinOrder.Amount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/yoserviceinorders">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public YoServiceinOrder? YoServiceinOrder { get; set; }

    private List<YoService> services = new List<YoService>();
    private List<YoOrder> orders = new List<YoOrder>();
    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        YoServiceinOrder ??= await DB.YoServiceinOrders.FirstOrDefaultAsync(m => m.Id == Id);

        if (YoServiceinOrder is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Получаем список услуг
        services = DB.YoServices.ToList();
        // Получаем список заказов
        orders = DB.YoOrders.ToList();
        // Получаем список пользователей
        var allUsers = UserManager.Users.ToList();
        users.AddRange(allUsers);
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateYoServiceinOrder()
    {
        DB.Attach(YoServiceinOrder!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!YoServiceinOrderExists(YoServiceinOrder!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/yoserviceinorders");
    }

    bool YoServiceinOrderExists(int id)
    {
        return DB.YoServiceinOrders.Any(e => e.Id == id);
    }
}
