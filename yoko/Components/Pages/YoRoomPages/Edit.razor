@page "/YoRooms/edit"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>YoRoom</h4>
<hr />
@if (YoRoom is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="YoRoom" OnValidSubmit="UpdateYoRoom" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="YoRoom.Id" value="@YoRoom.Id" />
                <div class="mb-3">
                    <label for="roomnumber" class="form-label">RoomNumber:</label>
                    <InputText id="roomnumber" @bind-Value="YoRoom.RoomNumber" class="form-control" />
                    <ValidationMessage For="() => YoRoom.RoomNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="costfornight" class="form-label">CostForNight:</label>
                    <InputNumber id="costfornight" @bind-Value="YoRoom.CostForNight" class="form-control" />
                    <ValidationMessage For="() => YoRoom.CostForNight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="roomtype" class="form-label">RoomType:</label>
                    <InputSelect id="roomtype" @bind-Value="YoRoom.RoomType" class="form-select">
                        @foreach (var item in Enum.GetValues(typeof(RoomType)))
                        {

                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => YoRoom.RoomType" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="roomstatus" class="form-label">RoomStatus:</label>
                    <InputSelect id="roomstatus" @bind-Value="YoRoom.RoomStatus" class="form-select">
                        @foreach (var item in Enum.GetValues(typeof(RoomStatus)))
                        {

                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => YoRoom.RoomStatus" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/yorooms">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public YoRoom? YoRoom { get; set; }

    protected override async Task OnInitializedAsync()
    {
        YoRoom ??= await DB.YoRooms.FirstOrDefaultAsync(m => m.Id == Id);

        if (YoRoom is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateYoRoom()
    {
        DB.Attach(YoRoom!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!YoRoomExists(YoRoom!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/yorooms");
    }

    bool YoRoomExists(int id)
    {
        return DB.YoRooms.Any(e => e.Id == id);
    }
}
