@page "/yofeedbacks/create"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>YoFeedback</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="YoFeedback" OnValidSubmit="AddYoFeedback" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
@*             <div class="mb-3">
                <label for="feedbackdate" class="form-label">FeedbackDate:</label> 
                <InputDate id="feedbackdate" @bind-Value="YoFeedback.FeedbackDate" class="form-control" /> 
                <ValidationMessage For="() => YoFeedback.FeedbackDate" class="text-danger" /> 
            </div> *@        
           @*  <div class="mb-3">
                <label for="feedbacktime" class="form-label">FeedbackTime:</label> 
                <InputText id="feedbacktime" @bind-Value="YoFeedback.FeedbackTime" class="form-control" /> 
                <ValidationMessage For="() => YoFeedback.FeedbackTime" class="text-danger" /> 
            </div>  *@       
            <div class="mb-3">
                <label for="feedbacktext" class="form-label">FeedbackText:</label> 
                <InputText id="feedbacktext" @bind-Value="YoFeedback.FeedbackText" class="form-control" /> 
                <ValidationMessage For="() => YoFeedback.FeedbackText" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label> 
                <InputNumber id="rating" @bind-Value="YoFeedback.Rating" class="form-control" min="0" />
                <ValidationMessage For="() => YoFeedback.Rating" class="text-danger" /> 
            </div>

            <div class="mb-3">
                <label for="guestid" class="form-label">GuestId:</label>
                <InputSelect id="guestid" @bind-Value="YoFeedback.GuestId" class="form-select" disabled="@IsUser">
                    @foreach (var guest in guests)
                    {
                        <option value="@guest.Id">@guest.Id</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => YoFeedback.GuestId" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/yofeedbacks">Back to List</a>
</div>

@code {
    private List<YoGuest> guests = new List<YoGuest>();
    private bool IsUser { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Получаем список гостей
        guests = DB.YoGuests.ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userManager = (UserManager<ApplicationUser>)UserManager;
            var user = await userManager.GetUserAsync(currentUser);
            if (user != null)
            {
                // Проверка роли пользователя
                IsUser = await userManager.IsInRoleAsync(user, "user");

                var guest = DB.YoGuests.FirstOrDefault(c => c.UserId == user.Id);
                if (guest != null)
                {
                    YoFeedback.GuestId = guest.Id;
                }
                else
                {
                    NavigationManager.NavigateTo("/yoguests/create");
                }
            }
        }
    }
    [SupplyParameterFromForm]
    public YoFeedback YoFeedback { get; set; } = new();

    // private string errorMessage;
    // private void ValidateRating(ChangeEventArgs e)
    // {
    //     string input = e.Value?.ToString();
    //     if (!string.IsNullOrEmpty(input) && !input.All(char.IsDigit))
    //     {
    //         YoFeedback.Rating = 0;
    //         errorMessage = "Invalid value.";

    //     }
    // }
    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddYoFeedback()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            var userManager = (UserManager<ApplicationUser>)UserManager;
            var user = await userManager.GetUserAsync(currentUser);
            var guest = DB.YoGuests.First(c => c.UserId == user.Id);
            YoFeedback.GuestId = guest.Id;
            YoFeedback.FeedbackDate = DateTime.Now;
            DB.YoFeedbacks.Add(YoFeedback);
            await DB.SaveChangesAsync();
        }
        NavigationManager.NavigateTo("/yofeedbacks");
    }
}
