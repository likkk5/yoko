@page "/yofeedbacks/delete"
@inject yoko.Data.ApplicationDbContext DB
@using yoko.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>YoFeedback</h4>
    <hr />
    @if (yofeedback is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FeedbackDate</dt>
            <dd class="col-sm-10">@yofeedback.FeedbackDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FeedbackTime</dt>
            <dd class="col-sm-10">@yofeedback.FeedbackTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FeedbackText</dt>
            <dd class="col-sm-10">@yofeedback.FeedbackText</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@yofeedback.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GuestId</dt>
            <dd class="col-sm-10">@yofeedback.GuestId</dd>
        </dl>
        <EditForm method="post" Model="yofeedback" OnValidSubmit="DeleteYoFeedback" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(yofeedback is null)">Delete</button> |
            <a href="/yofeedbacks">Back to List</a>
        </EditForm>
    }
</div>

@code {
    YoFeedback? yofeedback;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        yofeedback = await DB.YoFeedbacks.FirstOrDefaultAsync(m => m.Id == Id);

        if (yofeedback is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteYoFeedback()
    {
        DB.YoFeedbacks.Remove(yofeedback!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/yofeedbacks");
    }
}
